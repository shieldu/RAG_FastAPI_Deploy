가상환경을 만드는 것은 매우 권장됩니다. 가상환경을 사용하면 프로젝트마다 독립적인 패키지 관리가 가능하여, 다른 프로젝트의 종속성과 충돌을 피할 수 있습니다. 또한, 패키지 버전 관리가 쉬워지며, 시스템에 영향을 주지 않고 개발을 진행할 수 있습니다.

### 가상환경 설정 단계:
#### 1. **Python 가상환경 생성** (Python 내장 `venv` 사용)
```bash
# 프로젝트 디렉토리로 이동한 후
python -m venv venv  # 'venv'는 가상환경의 이름입니다. 원하는 이름으로 변경할 수 있습니다.
```

#### 2. **가상환경 활성화**
- **Mac/Linux**:
  ```bash
  source venv/bin/activate
  ```
- **Windows**:
  ```bash
  source venv/Scripts/activate
  ```

#### 3. **패키지 설치**
가상환경이 활성화된 상태에서 필요한 패키지를 설치합니다. 이전에 제공한 `requirements.txt` 파일을 이용해 다음 명령을 실행할 수 있습니다:
```bash
pip install -r requirements.txt
```

#### 4. **가상환경 비활성화**
개발이 끝난 후 가상환경을 비활성화하려면:
```bash
deactivate
```

### 가상환경의 장점:
- **독립된 환경**: 프로젝트마다 독립된 Python 환경을 유지할 수 있습니다.
- **패키지 충돌 방지**: 여러 프로젝트에서 사용하는 패키지들의 버전 충돌을 방지할 수 있습니다.
- **배포 준비**: 가상환경에서 정확한 패키지 목록(`requirements.txt`)을 추출할 수 있어 배포할 때 패키지를 쉽게 관리할 수 있습니다.
